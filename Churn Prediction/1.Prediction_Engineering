{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1. Prediction Engineering","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOnfD7awo8zX6PXFThGOlQp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"eLLYxYj4hPs_"},"source":["# Import libs"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ObCqYUug3Le","executionInfo":{"status":"ok","timestamp":1634564715105,"user_tz":-420,"elapsed":637,"user":{"displayName":"Nguyên Lê Công","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhueLj63nUoE3EJH3AAv8_Jg14J5-36mmOa5WvN=s64","userId":"12855861928721719544"}},"outputId":"57f13d27-27dd-4405-bc56-c01db604d20a"},"source":["from google.colab import drive\n","\n","drive.mount('/content/drive')\n","path = '/content/drive/MyDrive/TTKS 20203/VIB/Track 1 Datarathon/'\n","%cd $path\n","!ls"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/TTKS 20203/VIB/Track 1 Datarathon\n","'0.Data VIB Hackathon Guidline.xlsx'   4.Data_Deposit.csv\n"," 1.Data_Customer.csv\t\t       5.Data_Lending.csv\n"," 2.Data_MyVIB_Transaction.csv\t       6.Data_Card.csv\n"," 3.Data_MyVIB_Activity.csv\t       label_times.csv\n"," 3.Data_MyVIB_Activity_New\n"]}]},{"cell_type":"code","metadata":{"id":"bMiDTpyxjRZ1","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1634564727354,"user_tz":-420,"elapsed":11693,"user":{"displayName":"Nguyên Lê Công","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhueLj63nUoE3EJH3AAv8_Jg14J5-36mmOa5WvN=s64","userId":"12855861928721719544"}},"outputId":"6355e360-b7a2-4970-cdb5-8edf9c10dc27"},"source":["import pandas as pd\n","import numpy as np\n","\n","import warnings\n","warnings.filterwarnings('ignore', category=FutureWarning)\n","\n","df_3 = pd.read_csv(path + '3.Data_MyVIB_Activity.csv',\n","                        parse_dates=['ACTIVITY_DATE'],\n","                        infer_datetime_format = True,\n","                        dtype = {'DAY_OF_WEEK': 'category', 'ACTIVITY_HOUR': 'category', 'ACTIVITY_NAME': 'category'})\n","df_3.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ACTIVITY_DATE</th>\n","      <th>DAY_OF_WEEK</th>\n","      <th>ACTIVITY_HOUR</th>\n","      <th>ACTIVITY_NO</th>\n","      <th>CUSTOMER_NUMBER</th>\n","      <th>ACTIVITY_NAME</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2019-01-22</td>\n","      <td>Tue</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>630178</td>\n","      <td>MB_INTEREST_RATE_VIEW</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2019-01-10</td>\n","      <td>Thu</td>\n","      <td>18</td>\n","      <td>16</td>\n","      <td>630178</td>\n","      <td>MB_INTEREST_RATE_VIEW</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2019-01-26</td>\n","      <td>Sat</td>\n","      <td>17</td>\n","      <td>15</td>\n","      <td>630178</td>\n","      <td>MB_INTEREST_RATE_VIEW</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2019-01-02</td>\n","      <td>Wed</td>\n","      <td>9</td>\n","      <td>27</td>\n","      <td>630178</td>\n","      <td>MB_INTEREST_RATE_VIEW</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2019-01-19</td>\n","      <td>Sat</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>630178</td>\n","      <td>MB_INTEREST_RATE_VIEW</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  ACTIVITY_DATE DAY_OF_WEEK  ... CUSTOMER_NUMBER          ACTIVITY_NAME\n","0    2019-01-22         Tue  ...          630178  MB_INTEREST_RATE_VIEW\n","1    2019-01-10         Thu  ...          630178  MB_INTEREST_RATE_VIEW\n","2    2019-01-26         Sat  ...          630178  MB_INTEREST_RATE_VIEW\n","3    2019-01-02         Wed  ...          630178  MB_INTEREST_RATE_VIEW\n","4    2019-01-19         Sat  ...          630178  MB_INTEREST_RATE_VIEW\n","\n","[5 rows x 6 columns]"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"l8x2u7WnGYfG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634564727355,"user_tz":-420,"elapsed":9,"user":{"displayName":"Nguyên Lê Công","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhueLj63nUoE3EJH3AAv8_Jg14J5-36mmOa5WvN=s64","userId":"12855861928721719544"}},"outputId":"34b4161c-f1a6-46da-ed55-4a3be1b3b6f6"},"source":["df_3.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16132675 entries, 0 to 16132674\n","Data columns (total 6 columns):\n"," #   Column           Dtype         \n","---  ------           -----         \n"," 0   ACTIVITY_DATE    datetime64[ns]\n"," 1   DAY_OF_WEEK      category      \n"," 2   ACTIVITY_HOUR    category      \n"," 3   ACTIVITY_NO      int64         \n"," 4   CUSTOMER_NUMBER  int64         \n"," 5   ACTIVITY_NAME    category      \n","dtypes: category(3), datetime64[ns](1), int64(2)\n","memory usage: 415.4 MB\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rLsFcvy3gHdA","executionInfo":{"status":"ok","timestamp":1634564727355,"user_tz":-420,"elapsed":7,"user":{"displayName":"Nguyên Lê Công","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhueLj63nUoE3EJH3AAv8_Jg14J5-36mmOa5WvN=s64","userId":"12855861928721719544"}},"outputId":"489b712f-9ec0-4c7a-d513-4193569d2d9f"},"source":["df_3['ACTIVITY_NAME'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LOGIN                            3638224\n","LOGOUT                           3499251\n","QUERY_ACCOUNT_INFORMATION        2566128\n","MB_INTEREST_RATE_VIEW            2448877\n","TRANSACTION_OVERVIEW_QUERY       1079162\n","LOGIN_FINGER                      784355\n","TRANSFER_VIA_SML                  679219\n","LOGIN_FACEID                      237933\n","TRANSFER_VIB_ACCOUNT              216639\n","TOPUP_MOBILE                      206441\n","MB_LOCATION_POS_VIEW              184072\n","MB_ACCOUNT_QUICK_BALANCE          170850\n","AUTHENTICATION                    144475\n","MB_SET_PIN                         69744\n","MB_BILLPAY                         34703\n","TRANSFER_VIA_PAYMENT_CENTER        31443\n","MB_LOCATION_BRANCH_VIEW            28239\n","CHANGE_PASSWORD                    26410\n","TRANSFER_VIA_SML_ACCOUNT           20358\n","MB_LOCATION_ATM_VIEW               17996\n","TRANSACTION_DETAIL_QUERY           15658\n","MB_CHANGE_PIN                       8028\n","MB_RESET_PIN                        7496\n","MB_EXCHANGE_RATE_VIEW               5618\n","QUERY_CURRENT_ACCOUNT               5224\n","CARD_EGIFT_REGISTER_CASHBACK        5002\n","RB_BILLPAY_INSURANCE                 201\n","QUERY_MM_ACCOUNT                     176\n","CARD_EGIFT_REGISTER_REDEEM           142\n","SET_PASSWORD                         103\n","QUERY_LOAN_ACCOUNT                    91\n","CARD_EGIFT_REGISTER_ANNUALFEE         69\n","TRANSFER_INTERNATIONAL                59\n","ACCOUNT_ADDRESS_BOOK_UPDATE           54\n","RB_BILLPAY_MOBILE                     49\n","TRANSFER_VIB_ACCOUNT_BULK             41\n","RB_BILLPAY_WATER                      40\n","ACCOUNT_ADDRESS_BOOK_DELETE           29\n","QUERY_ACCOUNT_PORFOLIO                23\n","RB_BILLPAY_ADSL                       18\n","RB_BILLPAY_TELECOMMUNICATIONS         14\n","TRANSFER_VIA_PHONENO                   9\n","RB_BILLPAY_HOMEPHONE                   7\n","EXPORT_ACCOUNT_STATEMENT_LOAN          3\n","RB_BILLPAY_PSTN                        2\n","Name: ACTIVITY_NAME, dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"BnlhWHclkKXA"},"source":["# Preprocessing"]},{"cell_type":"code","metadata":{"id":"XZ05b7TekJsX"},"source":["cols = ['ACTIVITY_DATE','CUSTOMER_NUMBER']\n","cols1 = ['ACTIVITY_HOUR','ACTIVITY_NO','ACTIVITY_NAME']\n","\n","df3 = df_3.groupby(cols)[cols1].agg(list).reset_index()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2gUxVd39tC5N"},"source":["df3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"flDFcSImWYdL"},"source":["#Predict Engineering"]},{"cell_type":"code","metadata":{"id":"KxlptA_1WXdD"},"source":["def label_customer(customer_id, customer_activities, prediction_date, churn_days, \n","                   lead_time = 1, prediction_window = 1, return_act = False):\n","\n","    activities = customer_activities.copy()\n","    \n","    activities['ACTIVITY_DATE'] = pd.to_datetime(activities['ACTIVITY_DATE'])\n","    activities.sort_values(['ACTIVITY_DATE'], inplace = True)\n","\n","    activities['NEXT_ACTIVITY_DATE'] = activities['ACTIVITY_DATE'].shift(-1)\n","\n","    activities['DIFFERENCE_DAYS'] = (activities['NEXT_ACTIVITY_DATE'] - activities['ACTIVITY_DATE']).dt.days\n","    \n","    activities['CHURN'] = activities['DIFFERENCE_DAYS'] > churn_days\n","    \n","    activities.loc[activities['CHURN'] == True, 'CHURN_DATE'] = activities.loc[activities['CHURN'] == True, \n","                                                      'ACTIVITY_DATE'] + pd.Timedelta(churn_days + 1, 'd')\n","    \n","    first_activity = activities['ACTIVITY_DATE'].min()\n","    last_activity = activities['ACTIVITY_DATE'].max()\n","    start_date = pd.datetime(first_activity.year, first_activity.month, 1)\n","    \n","    if last_activity.month == 12:\n","        end_date = pd.datetime(last_activity.year + 1, 1, 1)\n","    else:\n","        end_date = pd.datetime(last_activity.year, last_activity.month + 1, 1)\n","    \n","    label_times = pd.DataFrame({'CUTOFF_TIME': pd.date_range(start_date, end_date, freq = prediction_date),\n","                                'CUSTOMER_NUMBER': customer_id})\n","    \n","    label_times['PREDICTION_WINDOW_START'] = label_times['CUTOFF_TIME'].shift(-lead_time)\n","    label_times['PREDICTION_WINDOW_END'] = label_times['CUTOFF_TIME'].shift(-(lead_time + prediction_window))\n","    \n","    previous_churn_date = None\n","\n","    for i, row in label_times.iterrows():\n","        \n","        churn_date = pd.NaT\n","        label = np.nan\n","\n","        window_start = row['PREDICTION_WINDOW_START']\n","        window_end = row['PREDICTION_WINDOW_END']\n","\n","        churns = activities.loc[(activities['CHURN_DATE'] >= window_start) & \n","                                  (activities['CHURN_DATE'] < window_end), 'CHURN_DATE']\n","\n","        if not churns.empty:\n","            label = 1 # churn\n","            churn_date = churns.values[0]\n","\n","            if not previous_churn_date:\n","                before_idx = label_times.loc[(label_times['CUTOFF_TIME'] <= churn_date)].index\n","            else:\n","                before_idx = label_times.loc[(label_times['CUTOFF_TIME'] <= churn_date) & \n","                                             (label_times['CUTOFF_TIME'] > previous_churn_date)].index\n","\n","            label_times.loc[before_idx, 'DAYS_TO_CHURN'] = (churn_date - label_times.loc[before_idx, \n","                                                                                         'CUTOFF_TIME']).dt.days\n","            previous_churn_date = churn_date\n","\n","        else:\n","            label = 0\n","\n","        label_times.loc[i, 'LABEL'] = label\n","        label_times.loc[i, 'CHURN_DATE'] = churn_date\n","        \n","        if not np.any(label_times['LABEL'] == 1):\n","            label_times['DAYS_TO_CHURN'] = np.nan\n","            label_times['CHURN_DATE'] = pd.NaT\n","        \n","    if return_act:\n","        return label_times.drop(columns = ['CUSTOMER_NUMBER']), activities\n","    \n","    return label_times[['CUSTOMER_NUMBER', 'CUTOFF_TIME', 'LABEL', 'DAYS_TO_CHURN', 'CHURN_DATE']].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_GmP0f_K7Kta"},"source":["df3.loc[df3.CUSTOMER_NUMBER == 0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qk0RI_jL6Jyx"},"source":["CUSTOMER_ID = 0\n","customer_activities = df3.loc[df3['CUSTOMER_NUMBER'] == CUSTOMER_ID].copy()\n","\n","label_times, cust_activities = label_customer(CUSTOMER_ID, customer_activities, prediction_date = 'MS', churn_days = 30, \n","                                              lead_time = 1, prediction_window = 1, return_act = True)\n","\n","label_times"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bxk2UTsl9K1J"},"source":["cust_activities"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"By_3C_DD-mtA"},"source":["def make_label_times(activities, prediction_date, churn_days, lead_time = 1, prediction_window = 1):\n","    \n","    label_times = []\n","    activities = activities.sort_values(['CUSTOMER_NUMBER', 'ACTIVITY_DATE'])\n","    \n","    for customer_id, customer_activities in activities.groupby('CUSTOMER_NUMBER'):\n","        lt_cust = label_customer(customer_id, customer_activities, prediction_date, churn_days, lead_time, prediction_window)\n","        \n","        label_times.append(lt_cust)\n","        \n","    return pd.concat(label_times)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aTCXl_rY_XLo"},"source":["import time\n","start_time = time.time()\n","\n","label_times = make_label_times(df3, prediction_date = 'MS', churn_days = 30, lead_time = 1, prediction_window = 1)\n","\n","print(\"--- %s seconds ---\" % (time.time() - start_time))\n","\n","label_times"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V-2q6CK6BImS"},"source":["cutoff_times = label_times.sort_values(by = ['CUTOFF_TIME'])\n","cutoff_times = cutoff_times['CUTOFF_TIME'].unique()\n","\n","for ms in cutoff_times:\n","    distribution = label_times.loc[label_times['CUTOFF_TIME'] == ms, ['LABEL']].value_counts()\n","    \n","    if len(distribution) == 1:\n","        churn_rate = 0\n","    else:\n","        churn_rate = distribution[1].item()*100 / (distribution[1].item() + distribution[0].item())\n","    \n","    print('cutoff_time: ', ms, 'churn_rate: ', churn_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1oOFpN6LK6eM"},"source":["label_times['LABEL'].value_counts().plot.bar(color = 'b');\n","plt.xlabel('Label'); plt.ylabel('Count'); plt.title('Label Distribution with Monthly Predictions');"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0DV0g0UdLFWk"},"source":["churn_rate = label_times['LABEL'].value_counts()\n","churn_rate.plot(kind='pie', autopct='%1.1f%%',figsize=(10, 10))\n","churn_rate"],"execution_count":null,"outputs":[]}]}